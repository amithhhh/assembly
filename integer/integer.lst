     1                                  ; integer.asm
     2                                  
     3                                  extern printf
     4                                  
     5                                  section .data
     6 00000000 8000000000000000        	number1 dq 128
     7 00000008 1300000000000000        	number2 dq 19
     8 00000010 F4FFFFFFFFFFFFFF        	neg_num dq -12
     9 00000018 546865206E756D6265-     	fmt db "The numbers are %ld and %ld",10,0
     9 00000021 72732061726520256C-
     9 0000002A 6420616E6420256C64-
     9 00000033 0A00               
    10 00000035 257320256C640A00        	fmtint db "%s %ld",10,0
    11 0000003D 73756D20697300          	sumi db "sum is",0
    12 00000044 646966666572656E63-     	difi db "difference is",0
    12 0000004D 6520697300         
    13 00000052 4E756D626572203120-     	inci db "Number 1 Incremented",0
    13 0000005B 496E6372656D656E74-
    13 00000064 656400             
    14 00000067 4E756D626572203120-     	deci db "Number 1 Decremented",0
    14 00000070 44656372656D656E74-
    14 00000079 656400             
    15 0000007C 5468652070726F6475-     	multi db "The product is",0
    15 00000085 637420697300       
    16 0000008B 5468652071756F7469-     	divi db "The quotient is",0
    16 00000094 656E7420697300     
    17 0000009B 546865204D6F64756C-     	remi db "The Modulo is",0
    17 000000A4 6F20697300         
    18                                  
    19                                  section .bss
    20 00000000 ????????????????        	resulti resq 1
    21 00000008 ????????????????        	modulo resq 1
    22                                  
    23                                  section .text
    24                                  	global main
    25                                  
    26                                  main:
    27 00000000 55                      	push rbp
    28 00000001 4889E5                  	mov rbp, rsp
    29                                  	; displaying Numbers
    30                                  
    31 00000004 48BF-                   	mov rdi, fmt
    31 00000006 [1800000000000000] 
    32 0000000E 488B3425[00000000]      	mov rsi, [number1]
    33 00000016 488B1425[08000000]      	mov rdx, [number2]
    34 0000001E B800000000              	mov rax, 0
    35 00000023 E8(00000000)            	call printf
    36                                  
    37                                  	;adding-------------------------------------------------------------------------------
    38                                  
    39 00000028 488B0425[00000000]      	mov rax, [number1]
    40 00000030 48030425[08000000]      	add rax, [number2]
    41 00000038 48890425[00000000]      	mov [resulti], rax
    42                                  	;displaying
    43                                  
    44 00000040 48BF-                   	mov rdi, fmtint
    44 00000042 [3500000000000000] 
    45 0000004A 48BE-                   	mov rsi, sumi
    45 0000004C [3D00000000000000] 
    46 00000054 488B1425[00000000]      	mov rdx, [resulti]
    47 0000005C B800000000              	mov rax, 0
    48 00000061 E8(00000000)            	call printf
    49                                  
    50                                  	;subtracting------------------------------------------------------------------------------------------------------------------
    51                                  
    52 00000066 488B0425[00000000]      	mov rax, [number1]
    53 0000006E 482B0425[08000000]      	sub rax, [number2]
    54 00000076 48890425[00000000]      	mov [resulti], rax
    55                                  	;displaying the result
    56                                  
    57 0000007E 48BF-                   	mov rdi,fmtint
    57 00000080 [3500000000000000] 
    58 00000088 48BE-                   	mov rsi, difi
    58 0000008A [4400000000000000] 
    59 00000092 488B1425[00000000]      	mov rdx, [resulti]
    60 0000009A B800000000              	mov rax, 0
    61 0000009F E8(00000000)            	call printf
    62                                  	
    63                                  	;incrementing-----------------------------------------------------------------------------------------------------------------------------------
    64                                  
    65 000000A4 488B0425[00000000]      	mov rax, [number1]
    66 000000AC 48FFC0                  	inc rax
    67 000000AF 48890425[00000000]      	mov [resulti], rax
    68                                  	;displaying
    69                                  
    70 000000B7 48BF-                   	mov rdi, fmtint
    70 000000B9 [3500000000000000] 
    71 000000C1 48BE-                   	mov rsi, inci
    71 000000C3 [5200000000000000] 
    72 000000CB 488B1425[00000000]      	mov rdx, [resulti]
    73 000000D3 B800000000              	mov rax, 0
    74 000000D8 E8(00000000)            	call printf
    75                                  
    76                                  	;decrementing-----------------------------------------------------------------------------------------------------------------------------------------
    77                                  
    78 000000DD 488B0425[00000000]      	mov rax, [number1]
    79 000000E5 48FFC8                  	dec rax
    80 000000E8 48890425[00000000]      	mov [resulti], rax
    81                                  	;displaying
    82                                  	
    83 000000F0 48BF-                   	mov rdi, fmtint
    83 000000F2 [3500000000000000] 
    84 000000FA 48BE-                   	mov rsi, deci
    84 000000FC [6700000000000000] 
    85 00000104 488B1425[00000000]      	mov rdx, [resulti]
    86 0000010C B800000000              	mov rax, 0
    87 00000111 E8(00000000)            	call printf
    88                                  
    89                                  	;sal rax, 2 left shift by 2
    90                                  	; sar rax, 2 right shift by 2
    91                                  
    92                                  	;multiply---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    93                                  
    94 00000116 488B0425[00000000]      	mov rax, [number1]
    95 0000011E 48F72C25[08000000]      	imul qword [number2]	;multiply rax with number 2
    96 00000126 48890425[00000000]      	mov	[resulti], rax
    97                                  
    98                                  	;displaying
    99                                  
   100 0000012E 48BF-                   	mov rdi, fmtint
   100 00000130 [3500000000000000] 
   101 00000138 48BE-                   	mov rsi, multi
   101 0000013A [7C00000000000000] 
   102 00000142 488B1425[00000000]      	mov rdx, [resulti]
   103 0000014A B800000000              	mov rax, 0
   104 0000014F E8(00000000)            	call printf
   105                                  
   106                                  	;divide-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   107                                  
   108 00000154 488B0425[00000000]      	mov rax, [number1]
   109 0000015C BA00000000              	mov rdx, 0		;rdx needs to be zero before idiv
   110                                  
   111 00000161 48F73C25[08000000]      	idiv qword [number2]	;divide rax with number2
   112 00000169 48890425[00000000]      	mov [resulti], rax
   113 00000171 48891425[08000000]      	mov [modulo], rdx
   114                                  
   115                                  	;displaying
   116                                  
   117 00000179 48BF-                   	mov rdi, fmtint
   117 0000017B [3500000000000000] 
   118 00000183 48BE-                   	mov rsi, divi
   118 00000185 [8B00000000000000] 
   119 0000018D 488B1425[00000000]      	mov rdx, [resulti]
   120 00000195 B800000000              	mov rax, 0
   121 0000019A E8(00000000)            	call printf
   122                                  
   123 0000019F 48BF-                   	mov rdi, fmtint
   123 000001A1 [3500000000000000] 
   124 000001A9 48BE-                   	mov rsi, remi
   124 000001AB [9B00000000000000] 
   125 000001B3 488B1425[08000000]      	mov rdx, [modulo]
   126 000001BB B800000000              	mov rax, 0
   127 000001C0 E8(00000000)            	call printf
   128                                  
   129 000001C5 4889EC                  	mov rsp, rbp
   130 000001C8 5D                      	pop rbp
   131 000001C9 C3                      	ret
